package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

// Human - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type Human struct {
	Name      string
	Age       int
	BirthDate time.Time
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π
func getAgeSuffix(age int) string {
	lastDigit := age % 10
	lastTwoDigits := age % 100

	if lastTwoDigits >= 11 && lastTwoDigits <= 14 {
		return "–ª–µ—Ç"
	}

	switch lastDigit {
	case 1:
		return "–≥–æ–¥"
	case 2, 3, 4:
		return "–≥–æ–¥–∞"
	default:
		return "–ª–µ—Ç"
	}
}

func getDaysSuffix(days int) string {
	lastDigit := days % 10
	lastTwoDigits := days % 100

	if lastTwoDigits >= 11 && lastTwoDigits <= 14 {
		return "–¥–Ω–µ–π"
	}

	switch lastDigit {
	case 1:
		return "–¥–µ–Ω—å"
	case 2, 3, 4:
		return "–¥–Ω—è"
	default:
		return "–¥–Ω–µ–π"
	}
}

// –ú–µ—Ç–æ–¥—ã Human
func (h *Human) SayHello() string {
	return fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç %s!", h.Name)
}

func (h *Human) Introduce() string {
	ageSuffix := getAgeSuffix(h.Age)
	return fmt.Sprintf("–Ø %s, –º–Ω–µ %d %s. –†–æ–¥–∏–ª—Å—è %s.",
		h.Name, h.Age, ageSuffix, h.BirthDate.Format("02.01.2006"))
}

func (h *Human) IsAdult() bool {
	return h.Age >= 18
}

// –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Human) DaysUntilBirthday() int {
	now := time.Now()

	// –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
	birthdayThisYear := time.Date(now.Year(), h.BirthDate.Month(), h.BirthDate.Day(), 0, 0, 0, 0, time.Local)

	// –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É
	if now.After(birthdayThisYear) {
		birthdayNextYear := time.Date(now.Year()+1, h.BirthDate.Month(), h.BirthDate.Day(), 0, 0, 0, 0, time.Local)
		days := int(birthdayNextYear.Sub(now).Hours() / 24)
		return days
	}

	// –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª
	days := int(birthdayThisYear.Sub(now).Hours() / 24)
	return days
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
func (h *Human) GetBirthdayInfo() string {
	daysUntil := h.DaysUntilBirthday()
	daysSuffix := getDaysSuffix(daysUntil)

	if daysUntil == 0 {
		return "üéÇ –°–µ–≥–æ–¥–Ω—è –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
	}

	nextAge := h.Age + 1
	ageSuffix := getAgeSuffix(nextAge)

	return fmt.Sprintf("–î–æ –≤–∞—à–µ–≥–æ %d-%s –æ—Å—Ç–∞–ª–æ—Å—å %d %s", nextAge, ageSuffix, daysUntil, daysSuffix)
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
func (h *Human) GetZodiacSign() string {
	day := h.BirthDate.Day()
	month := h.BirthDate.Month()

	switch month {
	case time.January:
		if day < 20 {
			return "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë"
		}
		return "–í–æ–¥–æ–ª–µ–π ‚ôí"
	case time.February:
		if day < 19 {
			return "–í–æ–¥–æ–ª–µ–π ‚ôí"
		}
		return "–†—ã–±—ã ‚ôì"
	case time.March:
		if day < 21 {
			return "–†—ã–±—ã ‚ôì"
		}
		return "–û–≤–µ–Ω ‚ôà"
	case time.April:
		if day < 20 {
			return "–û–≤–µ–Ω ‚ôà"
		}
		return "–¢–µ–ª–µ—Ü ‚ôâ"
	case time.May:
		if day < 21 {
			return "–¢–µ–ª–µ—Ü ‚ôâ"
		}
		return "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä"
	case time.June:
		if day < 21 {
			return "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä"
		}
		return "–†–∞–∫ ‚ôã"
	case time.July:
		if day < 23 {
			return "–†–∞–∫ ‚ôã"
		}
		return "–õ–µ–≤ ‚ôå"
	case time.August:
		if day < 23 {
			return "–õ–µ–≤ ‚ôå"
		}
		return "–î–µ–≤–∞ ‚ôç"
	case time.September:
		if day < 23 {
			return "–î–µ–≤–∞ ‚ôç"
		}
		return "–í–µ—Å—ã ‚ôé"
	case time.October:
		if day < 23 {
			return "–í–µ—Å—ã ‚ôé"
		}
		return "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè"
	case time.November:
		if day < 22 {
			return "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè"
		}
		return "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê"
	case time.December:
		if day < 22 {
			return "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê"
		}
		return "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ–º Human
type Action struct {
	Human

	Occupation string
	Skills     []string
	IsActive   bool
}

// –ú–µ—Ç–æ–¥—ã Action
func (a *Action) Work() string {
	if a.IsActive {
		return fmt.Sprintf("%s —Ä–∞–±–æ—Ç–∞–µ—Ç %s", a.Name, a.Occupation)
	}
	return fmt.Sprintf("%s —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", a.Name)
}

func (a *Action) DisplaySkills() string {
	if len(a.Skills) == 0 {
		return fmt.Sprintf("%s –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–≤—ã–∫–æ–≤", a.Name)
	}
	return fmt.Sprintf("–ù–∞–≤—ã–∫–∏ %s: %s", a.Name, strings.Join(a.Skills, ", "))
}

func (a *Action) SpecialIntroduce() string {
	baseIntro := a.Introduce()
	return fmt.Sprintf("%s –Ø —Ä–∞–±–æ—Ç–∞—é %s. %s",
		baseIntro, a.Occupation, a.DisplaySkills())
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
func readString(prompt string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print(prompt)
	input, _ := reader.ReadString('\n')
	return strings.TrimSpace(input)
}

func readInt(prompt string) int {
	for {
		input := readString(prompt)
		value, err := strconv.Atoi(input)
		if err == nil {
			return value
		}
		fmt.Println("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
	}
}

func readDate(prompt string) time.Time {
	for {
		input := readString(prompt + " (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì): ")
		date, err := time.Parse("02.01.2006", input)
		if err == nil {
			return date
		}
		fmt.Println("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)")
	}
}

func readSkills() []string {
	var skills []string
	fmt.Println("\nüí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'):")

	for {
		skill := readString("–ù–∞–≤—ã–∫: ")
		if strings.ToLower(skill) == "–≥–æ—Ç–æ–≤–æ" {
			break
		}
		if skill != "" {
			skills = append(skills, skill)
		}
	}
	return skills
}

func readYesNo(prompt string) bool {
	for {
		input := strings.ToLower(readString(prompt + " (–¥–∞/–Ω–µ—Ç): "))
		if input == "–¥–∞" || input == "–¥" {
			return true
		}
		if input == "–Ω–µ—Ç" || input == "–Ω" {
			return false
		}
		fmt.Println("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
	}
}

func main() {
	fmt.Println("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
	fmt.Println("========================")

	// –í–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	name := readString("–ò–º—è: ")
	age := readInt("–í–æ–∑—Ä–∞—Å—Ç: ")
	birthDate := readDate("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")

	// –í–≤–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\nüíº –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
	fmt.Println("========================")

	occupation := readString("–ö–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? ")
	skills := readSkills()
	isActive := readYesNo("–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Action
	person := Action{
		Human: Human{
			Name:      name,
			Age:       age,
			BirthDate: birthDate,
		},
		Occupation: occupation,
		Skills:     skills,
		IsActive:   isActive,
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
	fmt.Println(strings.Repeat("=", 50))

	// –ú–µ—Ç–æ–¥—ã Human
	fmt.Println("1.", person.SayHello())
	fmt.Println("2.", person.Introduce())

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
	fmt.Println("3.", person.GetBirthdayInfo())
	fmt.Printf("4. –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: %s\n", person.GetZodiacSign())

	if person.IsAdult() {
		fmt.Println("5. ‚úÖ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")
	} else {
		fmt.Println("5. ‚ùå –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")
	}

	// –ú–µ—Ç–æ–¥—ã Action
	fmt.Println("6.", person.Work())
	fmt.Println("7.", person.DisplaySkills())
	fmt.Println("8.", person.SpecialIntroduce())

	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üéâ –ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
	fmt.Println("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
	fmt.Println(strings.Repeat("=", 50))
	fmt.Println(person.SpecialIntroduce())

	ageSuffix := getAgeSuffix(person.Age)
	fmt.Printf("üéÇ –í–æ–∑—Ä–∞—Å—Ç: %d %s\n", person.Age, ageSuffix)

	fmt.Printf("üìÖ %s\n", person.GetBirthdayInfo())
	fmt.Printf("‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: %s\n", person.GetZodiacSign())
}
